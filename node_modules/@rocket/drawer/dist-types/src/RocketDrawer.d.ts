declare const RocketDrawer_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("@lion/overlays/types/OverlayMixinTypes").OverlayHost> & Pick<typeof import("@lion/overlays/types/OverlayMixinTypes").OverlayHost, "prototype"> & Pick<typeof LitElement, "prototype" | "render" | "styles" | "getStyles" | "properties" | "observedAttributes" | "createProperty">;
export class RocketDrawer extends RocketDrawer_base {
    static get properties(): {
        useOverlay: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        useOverlayMediaQuery: {
            type: StringConstructor;
        };
        mediaMatcher: {
            type: ObjectConstructor;
        };
    };
    containerEl: HTMLElement | undefined;
    mediaMatcher: MediaQueryList;
    useOverlay: boolean;
    /**
     * @param { MediaQueryListEvent } query
     */
    onMatchMedia(query: MediaQueryListEvent): void;
    __toggle(): void;
    useOverlayMediaQuery: string;
    /**
     * @param {TouchEvent} ev
     */
    onGestureStart(ev: TouchEvent): void;
    /**
     * @param {TouchEvent} ev
     */
    onGestureMove(ev: TouchEvent): void;
    onGestureEnd(): void;
    updateFromTouch(): void;
    _startX: number;
    _currentX: number;
    _velocity: number;
    _left: number;
    __touching: boolean;
    _timestamp: number;
    /**
     * @param {number} dDist
     * @param {number} dTime
     */
    addVelocitySample(dDist: number, dTime: number): void;
}
export type OverlayConfig = import("@lion/overlays/types/OverlayConfig").OverlayConfig;
import { LitElement } from "lit-element";
export {};
//# sourceMappingURL=RocketDrawer.d.ts.map